{"version":3,"file":"static/js/812.86b0668e.chunk.js","mappings":"wNAWA,MAAMA,GAAcC,EAAAA,EAAAA,GAAiB,IAwB/BC,GAAiBC,EAAAA,EAAAA,GAAkD,CAAEC,KAAM,SAA1DD,EAtBoFE,IAA0C,IAAzC,aAAEC,EAAY,MAAEC,EAAK,WAAEC,GAAYH,EAC3I,OACII,EAAAA,EAAAA,MAAA,QAAMC,SAAUJ,EAAaK,SAAA,EACxBC,EAAAA,EAAAA,GAAqC,QAAS,QAASC,EAAAA,EAAa,QAAS,CAACC,EAAAA,EAAUd,KACxFY,EAAAA,EAAAA,GAAqC,WAAY,QAASC,EAAAA,EAAa,WAAY,CAACC,EAAAA,GAAW,aAC/FF,EAAAA,EAAAA,GAAqC,aAAc,QAASC,EAAAA,OAAaE,EAAW,GAAI,WAAY,eACpGP,IAAcQ,EAAAA,EAAAA,KAAA,OAAKC,IAAKT,IACxBA,IAAcI,EAAAA,EAAAA,GAAqC,UAAW,QAASC,EAAAA,EAAa,uBAAwB,CAACC,EAAAA,IAC7GP,IAASS,EAAAA,EAAAA,KAAA,OAAKE,UAAWC,EAAAA,EAAMC,iBAAiBT,SAC5CJ,KAELS,EAAAA,EAAAA,KAAA,OAAAL,UACIK,EAAAA,EAAAA,KAAA,UAAAL,SAAQ,cAET,IAiDf,GAAeU,EAAAA,EAAAA,KANUC,IAAmB,CACxCd,WAAYc,EAAMC,KAAKf,WACvBgB,OAAQF,EAAMC,KAAKC,UAIiB,CAAEC,MAAM,MAAhD,EArBuEC,GAK/DA,EAAMF,QACCR,EAAAA,EAAAA,KAACW,EAAAA,GAAQ,CAACC,GAAG,cAGjBnB,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACHK,EAAAA,EAAAA,KAAA,MAAAL,SAAI,WACJK,EAAAA,EAAAA,KAACd,EAAc,CAACQ,SAVFmB,IACdH,EAAMD,MAAMI,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,QAAQ,EASjDzB,WAAYkB,EAAMlB,iB,mFCnDvD,MAAMK,EAAkER,IAAoC,IAAnC,MAAE6B,EAAK,KAAEC,KAASC,GAAW/B,EACzG,MAAMgC,EAAWF,EAAKG,SAAWH,EAAK5B,MACtC,OACIE,EAAAA,EAAAA,MAAA,OAAKS,UAAS,GAAAqB,OAAKpB,EAAAA,EAAMqB,YAAW,KAAAD,OAAIF,GAAYlB,EAAAA,EAAMZ,OAAQI,SAAA,EAC9DK,EAAAA,EAAAA,KAAA,OAAAL,UACIK,EAAAA,EAAAA,KAACoB,EAAUK,MAAK,IAAKL,KAAeF,KAAWC,MAElDE,IAAYrB,EAAAA,EAAAA,KAAA,QAAAL,SAAOwB,EAAK5B,UACvB,EAIP,SAASK,EAA0C8B,EAAoBD,EAAwCE,EAA+DC,EAAgCC,EAAsCC,EAAeC,EAAeC,GAA2B,IAAXtB,EAAKuB,UAAAC,OAAA,QAAAnC,IAAAkC,UAAA,GAAAA,UAAA,GAAC,CAAC,EAC5S,OACAxC,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CACKoC,GAAK/B,EAAAA,EAAAA,KAACmC,EAAAA,EAAK,CAACT,KAAMA,EAAMD,MAAOA,EAAOE,UAAWA,EAAWC,YAAaA,EAAaQ,SAAUP,EAAYC,KAAMA,EAAME,MAAOA,KAAWtB,MAEnJ,C,0CC9BO,MAAMZ,EAA+BkC,IACxC,IAAKA,EAAO,MAAO,mBACH,EAGP/C,EAAoBoD,GAAyCL,IACtE,GAAIA,EAAME,OAASG,EAAU,MAAM,iBAANd,OAAwBc,EAAQ,WAC7C,C,kCCRpB,SAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,wC","sources":["components/Login/Login.tsx","components/common/FormsControls/FormsControls.tsx","components/utils/validators/validators.ts","webpack://my-app/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["import React from \"react\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { FormControl, createField } from \"../common/FormsControls/FormsControls.tsx\";\r\nimport { maxLengthCreator, required } from \"../utils/validators/validators.ts\";\r\nimport { connect } from \"react-redux\";\r\nimport { login } from \"../../redux/auth-reducer.ts\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport style from \"./../common/FormsControls/FormsControls.module.css\";\r\nimport { AppStateType } from \"../../redux/redux-store.ts\";\r\n\r\n\r\nconst maxLength40 = maxLengthCreator(40);\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({ handleSubmit, error, captchaUrl }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesKeysType>(\"email\", \"input\", FormControl, \"Email\", [required, maxLength40])}\r\n            {createField<LoginFormValuesKeysType>(\"password\", \"input\", FormControl, \"Password\", [required], \"password\")}\r\n            {createField<LoginFormValuesKeysType>(\"rememberMe\", \"input\", FormControl, undefined, [], \"checkbox\", \"Remember me\")}\r\n            {captchaUrl && <img src={captchaUrl}/>}\r\n            {captchaUrl && createField<LoginFormValuesKeysType>(\"captcha\", \"input\", FormControl, \"Symbols from captcha\", [required])}\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({ form: \"login\" })(LoginForm);\r\n\r\ntype MapStateToPropsType = {\r\n    captchaUrl: string | null\r\n    isAuth: boolean\r\n};\r\n\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n};\r\n\r\ntype LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n};\r\n\r\ntype LoginFormValuesKeysType = Extract<keyof LoginFormValuesType, string>;\r\n\r\nconst Login: React.FC<MapStateToPropsType & MapDispatchToPropsType> = (props) => {\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Navigate to=\"/profile\" />\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, { login })(Login);","import React from \"react\";\r\nimport style from \"./FormsControls.module.css\"\r\nimport { Field, WrappedFieldProps } from \"redux-form\";\r\nimport { FieldValiatorType } from \"../../utils/validators/validators.ts\";\r\n\r\ntype FormControlPropsType = {\r\n    name: string\r\n    child: \"input\" | \"textarea\" | \"select\"\r\n    placeholder: string | undefined\r\n    validators: Array<FieldValiatorType>\r\n    type?: string\r\n    text?: string\r\n    value?: string\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlPropsType & WrappedFieldProps> = ({ input, meta, ...restProps }) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={`${style.formControl} ${hasError && style.error}`}>\r\n            <div>\r\n                <restProps.child {...restProps} {...input} {...meta} />\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function createField<FormKeysType extends string> (name: FormKeysType, child: \"input\" | \"textarea\" | \"select\", component: React.FC<FormControlPropsType & WrappedFieldProps>, placeholder: string| undefined, validators: Array<FieldValiatorType>, type?: string, text?: string, value?: string, props={}) {\r\n    return (\r\n    <div>\r\n        {text}<Field name={name} child={child} component={component} placeholder={placeholder} validate={validators} type={type} value={value} {...props}/>\r\n    </div>)\r\n}","export type FieldValiatorType = (value: string) => string | undefined;\r\n\r\nexport const required: FieldValiatorType = (value) => {\r\n    if (!value) return \"Field is required\";\r\n    return undefined;\r\n}\r\n\r\nexport const maxLengthCreator = (maxValue: number): FieldValiatorType => (value) => {\r\n    if (value.length > maxValue) return `Max length is ${maxValue} symbols`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__EUGJ+\",\"error\":\"FormsControls_error__srujM\",\"formSummaryError\":\"FormsControls_formSummaryError__AKM+F\"};"],"names":["maxLength40","maxLengthCreator","LoginReduxForm","reduxForm","form","_ref","handleSubmit","error","captchaUrl","_jsxs","onSubmit","children","createField","FormControl","required","undefined","_jsx","src","className","style","formSummaryError","connect","state","auth","isAuth","login","props","Navigate","to","formData","email","password","rememberMe","captcha","input","meta","restProps","hasError","touched","concat","formControl","child","name","component","placeholder","validators","type","text","value","arguments","length","Field","validate","maxValue"],"sourceRoot":""}