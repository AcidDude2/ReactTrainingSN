{"version":3,"file":"static/js/114.fc4ada48.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogMember/DialogMember.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","components/common/FormsControls/FormsControls.jsx","components/utils/validators/validators.js","hoc/withAuthRedirect.jsx","webpack://my-app/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__KS4gj\",\"dialogsMembers\":\"Dialogs_dialogsMembers__+WeJu\",\"dialog\":\"Dialogs_dialog__Pe+op\",\"active\":\"Dialogs_active__YP6O5\",\"messages\":\"Dialogs_messages__vAPrT\"};","import React from \"react\";\r\nimport styles from \"./../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogMember = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    \r\n    return (\r\n        <div>\r\n            <NavLink to={path} className={navData => navData.isActive ? styles.active : styles.dialog}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogMember;","import React from \"react\";\r\nimport styles from \"./../Dialogs.module.css\";\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={styles.dialog}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { FormControl } from \"../../common/FormsControls/FormsControls\";\r\nimport { required, maxLengthCreator } from \"../../utils/validators/validators\";\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Enter your message\"} name={\"newMessageBody\"} component={FormControl} child={\"textarea\"} validate={[required, maxLength50]} />\r\n            </div>\r\n            <div>\r\n                <button>Send Message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport const AddMessageReduxForm = reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm);","import React from \"react\";\r\nimport styles from \"./Dialogs.module.css\";\r\nimport DialogMember from \"./DialogMember/DialogMember\";\r\nimport Message from \"./Message/Message\";\r\nimport { AddMessageReduxForm } from \"./AddMessageForm/AddMessageForm\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage;\r\n    // console.log(props.users);\r\n\r\n    let sendMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    let dialogElements = state.dialogs.map(d => <DialogMember name={d.name} id={d.id} />);\r\n\r\n    let messagesElement = state.messages.map(m => <Message message={m.message} />);\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogsMembers}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={styles.messages}>\r\n                {messagesElement}\r\n                <div>\r\n                    <AddMessageReduxForm onSubmit={sendMessage} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { sendMessageCreator } from \"../../redux/dialog-reducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        // users: state.usersPage.users\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n  \r\n\r\nexport default compose(withAuthRedirect,connect(mapStateToProps, mapDispatchToProps))(Dialogs);","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\"\r\nimport { Field } from \"redux-form\";\r\n\r\n\r\nexport const FormControl = ({ input, meta, ...restProps }) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={`${styles.formControl} ${hasError && styles.error}`}>\r\n            <div>\r\n                <restProps.child {...restProps} {...input} {...meta} />\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder, name, child, validators, component, props={}, text = \"\") => {\r\n    return (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name} child={child} validate={validators} component={component} {...props}/>{text}\r\n    </div>)\r\n}","export const required = value => {\r\n    if (!value) return \"Field is required\";\r\n    return undefined;\r\n}\r\n\r\nexport const maxLengthCreator = (maxValue) => (value) => {\r\n    if (value.length > maxValue) return `Max length is ${maxValue} symbols`;\r\n    return undefined;\r\n}","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (this.props.isAuth) {\r\n                return <Component {...this.props} />\r\n            } else if (!this.props.isAuth && !this.props.router) {\r\n                return <Navigate to='/login' />\r\n            } else {\r\n                if (!this.props.isAuth && !this.props.router.params.userId) {\r\n                    return <Navigate to='/login' />\r\n                } else {\r\n                    if (!this.props.isAuth && this.props.router.params.userId) return <Component {...this.props} />\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return connect(mapStateToPropsForRedirect, {})((RedirectComponent));\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__EUGJ+\",\"error\":\"FormsControls_error__srujM\",\"formSummaryError\":\"FormsControls_formSummaryError__AKM+F\"};"],"names":["props","path","id","_jsx","children","NavLink","to","className","navData","isActive","styles","name","message","maxLength50","maxLengthCreator","AddMessageReduxForm","reduxForm","form","_jsxs","onSubmit","handleSubmit","Field","placeholder","component","FormControl","child","validate","required","state","dialogsPage","dialogElements","dialogs","map","d","DialogMember","messagesElement","messages","m","Message","values","sendMessage","newMessageBody","compose","withAuthRedirect","connect","dispatch","sendMessageCreator","Dialogs","_ref","input","meta","restProps","_objectWithoutProperties","_excluded","hasError","touched","error","concat","formControl","_objectSpread","createField","validators","arguments","length","undefined","text","value","maxValue","mapStateToPropsForRedirect","isAuth","auth","Component","RedirectComponent","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","_createClass","key","this","router","params","userId","Navigate","React"],"sourceRoot":""}