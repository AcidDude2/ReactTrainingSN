{"version":3,"file":"static/js/257.7b12a989.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogMember/DialogMember.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/common/FormsControls/FormsControls.tsx","components/utils/validators/validators.ts","hoc/withAuthRedirect.tsx","webpack://my-app/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__KS4gj\",\"dialogsMembers\":\"Dialogs_dialogsMembers__+WeJu\",\"dialog\":\"Dialogs_dialog__Pe+op\",\"active\":\"Dialogs_active__YP6O5\",\"messages\":\"Dialogs_messages__vAPrT\"};","import React from \"react\";\r\nimport styles from \"./../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogMember = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    \r\n    return (\r\n        <div>\r\n            <NavLink to={path} className={navData => navData.isActive ? styles.active : styles.dialog}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogMember;","import React from \"react\";\r\nimport styles from \"./../Dialogs.module.css\";\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={styles.dialog}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport { reduxForm, InjectedFormProps } from \"redux-form\";\r\nimport { FormControl, createField } from \"../../common/FormsControls/FormsControls.tsx\";\r\nimport { required, maxLengthCreator } from \"../../utils/validators/validators.ts\";\r\nimport { newMessageFormValuesType } from \"../Dialogs.tsx\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<newMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n            {createField<NewMessageFormValuesKeysType>(\"newMessageBody\", \"textarea\", FormControl, \"Enter new message\", [required, maxLength50])}\r\n            </div>\r\n            <div>\r\n                <button>Send Message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof newMessageFormValuesType, string>;\r\ntype PropsType = {};\r\n\r\nexport const AddMessageReduxForm = reduxForm<newMessageFormValuesType>({form: \"dialogAddMessageForm\"})(AddMessageForm);","import React from \"react\";\r\nimport styles from \"./Dialogs.module.css\";\r\nimport DialogMember from \"./DialogMember/DialogMember\";\r\nimport Message from \"./Message/Message\";\r\nimport { AddMessageReduxForm } from \"./AddMessageForm/AddMessageForm.tsx\";\r\nimport { InitialStateType } from \"../../redux/dialog-reducer\";\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let addNewMessage = (values: newMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    let dialogElements = state.dialogs.map(d => <DialogMember name={d.name} id={d.id} />);\r\n\r\n    let messagesElement = state.messages.map(m => <Message message={m.message} />);\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogsMembers}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={styles.messages}>\r\n                {messagesElement}\r\n                <div>\r\n                    <AddMessageReduxForm onSubmit={addNewMessage} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type newMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType,\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport Dialogs from \"./Dialogs.tsx\";\r\nimport { connect } from \"react-redux\";\r\nimport { actions } from \"../../redux/dialog-reducer.ts\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect.tsx\";\r\nimport { compose } from \"redux\";\r\nimport { AppStateType } from \"../../redux/redux-store.ts\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {...actions}), withAuthRedirect)(Dialogs);","import React from \"react\";\r\nimport style from \"./FormsControls.module.css\"\r\nimport { Field, WrappedFieldProps } from \"redux-form\";\r\nimport { FieldValiatorType } from \"../../utils/validators/validators.ts\";\r\n\r\ntype FormControlPropsType = {\r\n    name: string\r\n    child: \"input\" | \"textarea\" | \"select\"\r\n    placeholder: string | undefined\r\n    validators: Array<FieldValiatorType>\r\n    type?: string\r\n    text?: string\r\n    value?: string\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlPropsType & WrappedFieldProps> = ({ input, meta, ...restProps }) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={`${style.formControl} ${hasError && style.error}`}>\r\n            <div>\r\n                <restProps.child {...restProps} {...input} {...meta} />\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function createField<FormKeysType extends string> (name: FormKeysType, child: \"input\" | \"textarea\" | \"select\", component: React.FC<FormControlPropsType & WrappedFieldProps>, placeholder: string| undefined, validators: Array<FieldValiatorType>, type?: string, text?: string, value?: string, props={}) {\r\n    return (\r\n    <div>\r\n        {text}<Field name={name} child={child} component={component} placeholder={placeholder} validate={validators} type={type} value={value} {...props}/>\r\n    </div>)\r\n}","export type FieldValiatorType = (value: string) => string | undefined;\r\n\r\nexport const required: FieldValiatorType = (value) => {\r\n    if (!value) return \"Field is required\";\r\n    return undefined;\r\n}\r\n\r\nexport const maxLengthCreator = (maxValue: number): FieldValiatorType => (value) => {\r\n    if (value.length > maxValue) return `Max length is ${maxValue} symbols`;\r\n    return undefined;\r\n}","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { AppStateType } from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport function withAuthRedirect<WCP extends MapPropsType>(WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapPropsType & RouterPropsType> = (props) => {\r\n        let {isAuth, router, ...restProps} = props\r\n        if (props.isAuth) {\r\n            return <WrappedComponent {...restProps as WCP} />\r\n        } else if (!props.isAuth && !props.router) {\r\n            return <Navigate to='/login' />\r\n        } else {\r\n            if (!props.isAuth && !props.router.params.userId) {\r\n                return <Navigate to='/login' />\r\n            } else {\r\n                if (!props.isAuth && props.router.params.userId) return <WrappedComponent {...restProps as WCP} />\r\n            }\r\n        }\r\n    }\r\n    return connect<MapPropsType, {}, WCP, AppStateType>(mapStateToPropsForRedirect)((RedirectComponent));\r\n};\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n};\r\n\r\ntype RouterPropsType = {\r\n    router: {\r\n        params: {\r\n            userId: number\r\n        }\r\n    }\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__EUGJ+\",\"error\":\"FormsControls_error__srujM\",\"formSummaryError\":\"FormsControls_formSummaryError__AKM+F\"};"],"names":["props","path","id","_jsx","children","NavLink","to","className","navData","isActive","styles","name","message","maxLength50","maxLengthCreator","AddMessageReduxForm","reduxForm","form","_jsxs","onSubmit","handleSubmit","createField","FormControl","required","state","dialogsPage","dialogElements","dialogs","map","d","DialogMember","messagesElement","messages","m","Message","values","sendMessage","newMessageBody","compose","connect","actions","withAuthRedirect","Dialogs","_ref","input","meta","restProps","hasError","touched","error","concat","style","formControl","child","component","placeholder","validators","type","text","value","arguments","length","undefined","Field","validate","maxValue","mapStateToPropsForRedirect","isAuth","auth","WrappedComponent","router","params","userId","Navigate"],"sourceRoot":""}